User REST API:

	[POST] /api/login: Returns bearer token which is necessary for all other requests.
	Parameters:
		> username: the username
		> password: the password
	Returns:
		> 403 FORBIDDEN if credentials are wrong
		> 200 OK with token if credentials are ok

	[POST] /api/user: Signs up a new user. Admin only endpoint
	Parameters:
		> username: new user's username, must be nonexisting
		> password: new user's password
	Returns:
		> 201 CREATED if user was successfully created
		> 400 BAD REQUEST if user already exists
		> 403 FORBIDDEN if user does not have admin role

	[GET] /api/user: Get current logged in user's name.
	Headers: NONE
	Returns:
		> 200 and username of current user

	[PUT] /api/user: Changes password of current user.
	Parameters:
		> oldPassword: current user's old password
		> newPassword: new desired password
	Returns:
		> 401 UNAUTHORIZED if incorrect old password
		> 200 OK if change successful

Article REST API:
	
	[GET] /api/randomarticle: Gets a full random article from database that is manually marked as 'valid'.
		It follows that this would also have targets already
	Headers: NONE
	Returns:
		> 200 and a full article

	[GET] /api/randomarticleid: Same as before but id only.
	Headers: NONE
	Returns:
		> 200 and random article id

	[POST] /api/article: Assigns an article to the user.
	Headers: NONE
	Returns:
		> 200 if ok
		> 404 if nothing left?

Comment REST API:

	[GET] /api/comment: Gets a comment to label automatically from reserved articles assigned to account.
	Headers: NONE
	Returns:
		> 200 OK and a comment if an unlabeled comment is available in the assigned articles field
		> 404 NOT FOUND if labeller has finished labelling all the assigned articles
	
	[GET] /api/comment: Gets a comment given comment address and article id. Article id refers to mongo id not reddit id.
	Headers:
		> article_id : mongo article id
		> comment_address: comment indice address
	Returns:
		> 404 NOT FOUND if comment cannot be found
		> 200 OK and the comment if found

Label REST API:

	[GET] /api/mylabels: Get all the labels of the currently logged in user.
	Headers: NONE
	Returns:
		> 200 and a list of all labels, may be empty if there are none

	[GET] /api/label: Get a particular label made by the currently logged in user
	Headers:
		> article_id: mongo article id
		> comment_address: comment indice address
	Returns:
		> 200 OK and the label if found
		> 404 NOT FOUND if label cannot be found

	[POST] /api/label: Label a particular comment, if already existing overwrite
	Parameters:
		> article_id: mongo article id
		> comment_address: comment indice address
		> label: the desired label
	Returns:
		> 201 CREATED if label successful
		> 404 NOT FOUND if comment cannot be found

AI REST API:

	[GET] /ai/article: Gets the AI data of a particular article
	Paramters:
		> article: reddit article id 
	Returns:
		> 200 ok and desired result if found, else
		> 208 ALREADY REPORTED if already in job queue
		> 404 NOT FOUND
	
	[POST] /ai/article: Requests a particular article to be evaluated by the system
	Parameters:
		> article: reddit article id
	Returns:
		> 200 ok
		> 400 BAD REQUEST if already in job queue.